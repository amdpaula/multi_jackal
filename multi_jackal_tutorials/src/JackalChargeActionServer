#! /usr/bin/env python
import rospy
import actionlib
import dynamic_reconfigure.client

import tf2_ros
import tf2_geometry_msgs

from tf.transformations import quaternion_from_euler, euler_from_quaternion
from geometry_msgs.msg  import Pose, Twist
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

from std_msgs.msg import String
from std_srvs.srv import Empty

from multi_jackal_tutorials.msg import ChargeJackalAction
from multi_jackal_tutorials.msg import ChargeJackalGoal
from multi_jackal_tutorials.msg import ChargeJackalFeedback
from multi_jackal_tutorials.msg import ChargeJackalResult

from battery_mockup.msg import ChargeAction, ChargeGoal, ChargeResult

goal_ahead_of_charging = 0.5

charging_pose_in_laser_frame = Pose()
charging_pose_in_laser_frame.position.x = goal_ahead_of_charging
charging_pose_in_laser_frame.position.y = 0.0
charging_pose_in_laser_frame.position.z = 0.0
charging_pose_in_laser_frame.orientation.w = 1

map_frame_id = "map"
charging_robot_frame_id = "warthog/front_laser"

cmd_vel_topic = "jackal_velocity_controller/cmd_vel"

class ChargeJackalActionServer(object):
    def __init__(self, name):
        # create messages that are used to publish feedback/result
        self._feedback = ChargeJackalFeedback()
        self._result = ChargeJackalResult()
        self._ns = rospy.get_namespace()
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, ChargeJackalAction, execute_cb=self.execute_cb, auto_start = False)

        self._tf_buffer = tf2_ros.Buffer()
        self._tf_listener = tf2_ros.TransformListener(self._tf_buffer)

        self._as.start()

    def reconfigure_parameter(self, parameter_name, new_value):
        full_parameter_name = parameter_name
        components = full_parameter_name.split("/")

        #print components
        node_name = "/".join(components[0:-1])
        parameter_name = components[-1]
        #print node_name
        #print parameter_name

        reconfig_client = dynamic_reconfigure.client.Client(node_name)

        #print "Reaching here"
        #print parameter_name
        #print new_value

        config = reconfig_client.update_configuration({parameter_name : new_value})

        #print config

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        success = True

        #Setup topic that will signal Warthog that charging is done

        done_publisher = rospy.Publisher('/done_charging', String, queue_size = 1)

        #Clear costmaps
        clear_service_name = self._ns+"move_base/clear_costmaps"
        print(clear_service_name)
        print("waiting...")
        rospy.wait_for_service(clear_service_name)
        print("available")
        clearcmp = rospy.ServiceProxy(clear_service_name, Empty)
        print("response")
        response = clearcmp()
        print("cleared")

        #Get first pose using global variable and transform it to map frame
        charging_pose_stamped = tf2_geometry_msgs.PoseStamped()
        charging_pose_stamped.pose = charging_pose_in_laser_frame
        charging_pose_stamped.header.frame_id = charging_robot_frame_id
        charging_pose_stamped.header.stamp = rospy.Time(0)

        try:
            output_pose_stamped = self._tf_buffer.transform(charging_pose_stamped, map_frame_id, rospy.Duration(2))

        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            raise

        #print output_pose_stamped

        rospy.loginfo('%s will charge' % (self._ns) )

        client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
        client.wait_for_server()

        mb_goal = MoveBaseGoal()
        mb_goal.target_pose.header.frame_id = "map"
        mb_goal.target_pose.header.stamp = rospy.Time.now()
        mb_goal.target_pose.pose = output_pose_stamped.pose

        #Make quaternion vertical by ignoring roll and pitch of goal pose
        (roll, pitch, yaw) = euler_from_quaternion([mb_goal.target_pose.pose.orientation.x, mb_goal.target_pose.pose.orientation.y, mb_goal.target_pose.pose.orientation.z, mb_goal.target_pose.pose.orientation.w])
        #print roll, pitch, yaw
        #print mb_goal

        quaternion = quaternion_from_euler(0.0, 0.0, yaw)
        mb_goal.target_pose.pose.orientation.x = quaternion[0];
        mb_goal.target_pose.pose.orientation.y = quaternion[1];
        mb_goal.target_pose.pose.orientation.z = quaternion[2];
        mb_goal.target_pose.pose.orientation.w = quaternion[3];

        #Reconfigure local planner to allow local planner to get closer to goal
        self.reconfigure_parameter("move_base/local_costmap/inflater_layer/inflation_radius", 0.1)
        self.reconfigure_parameter("move_base/global_costmap/inflater_layer/inflation_radius", 0.1)
        self.reconfigure_parameter("move_base/TrajectoryPlannerROS/max_vel_x", 0.5)
        self.reconfigure_parameter("move_base/TrajectoryPlannerROS/occdist_scale", 0.01)
        self.reconfigure_parameter("move_base/TrajectoryPlannerROS/goal_distance_bias", 2.0)

        #Send goal to move base
        client.send_goal(mb_goal)
        wait = client.wait_for_result()


        #Backup into Warthog
        cmd_vel_publisher = rospy.Publisher(self._ns + cmd_vel_topic , Twist)
        backup_command = Twist()
        speed = 0.5
        backup_command.linear.x = -speed
        t0 = rospy.Time.now().to_sec()
        current_distance = 0
        while ( current_distance < (goal_ahead_of_charging+0.25) ):
            cmd_vel_publisher.publish(backup_command)
            t1=rospy.Time.now().to_sec()
            current_distance= speed*(t1-t0)
        #After the loop, stops the robot
        backup_command.linear.x = 0
        #Force the robot to stop
        cmd_vel_publisher.publish(backup_command)

        #Send actual charging goal to charge action server

        charging_client = actionlib.SimpleActionClient('ChargeActionServer', ChargeAction)
        charging_client.wait_for_server()

        charging_goal = ChargeGoal()
        charging_goal.check = 0
        charging_client.send_goal(charging_goal)
        wait = charging_client.wait_for_result()

        #Release from Warthog
        release_command = Twist()
        speed = 0.5
        release_command.linear.x = speed
        t0 = rospy.Time.now().to_sec()
        current_distance = 0
        while ( current_distance < (goal_ahead_of_charging+0.25) ):
            cmd_vel_publisher.publish(release_command)
            t1=rospy.Time.now().to_sec()
            current_distance= speed*(t1-t0)
        #After the loop, stops the robot
        release_command.linear.x = 0
        #Force the robot to stop
        cmd_vel_publisher.publish(release_command)

        #Set local planner back to defaults
        self.reconfigure_parameter("move_base/local_costmap/inflater_layer/inflation_radius", 0.25)
        self.reconfigure_parameter("move_base/global_costmap/inflater_layer/inflation_radius", 0.25)
        self.reconfigure_parameter("move_base/TrajectoryPlannerROS/max_vel_x", 0.8)
        self.reconfigure_parameter("move_base/TrajectoryPlannerROS/occdist_scale", 0.1)
        self.reconfigure_parameter("move_base/TrajectoryPlannerROS/goal_distance_bias", 0.8)

        done_string = "Done"
        done_publisher.publish(done_string)

        print("Jackal is done charging")

        if success:
            self._result.success = 1
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result)

if __name__ == '__main__':
    rospy.init_node('tb1_Navigate')
    server = ChargeJackalActionServer(rospy.get_name())
    rospy.spin()
