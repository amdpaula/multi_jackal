#! /usr/bin/env python3
from random import randint

import rospy
import actionlib
import tf2_ros
import tf2_geometry_msgs

from geometry_msgs.msg import Pose
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from std_srvs.srv import Empty

from multi_jackal_tutorials.msg import NavigateWaypointAction
from multi_jackal_tutorials.msg import NavigateWaypointGoal
from multi_jackal_tutorials.msg import NavigateWaypointFeedback
from multi_jackal_tutorials.msg import NavigateWaypointResult

map_frame_id = "map"

def transform_pose(input_pose, from_frame, to_frame):
    tf_buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tf_buffer)

    pose_stamped = tf2_geometry_msgs.PoseStamped()
    pose_stamped.pose = input_pose
    pose_stamped.header.frame_id = from_frame
    pose_stamped.header.stamp = rospy.Time(0)

    try:
        output_pose_stamped = tf_buffer.transform(pose_stamped, to_frame, rospy.Duration(2))
        return output_pose_stamped.pose

    except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
        raise

def convert_pose_list_to_obj(pose_in_list):
    output_pose = Pose()
    output_pose.position.x = pose_in_list[0]
    output_pose.position.y = pose_in_list[1]
    output_pose.position.z = pose_in_list[2]
    output_pose.orientation.x = pose_in_list[3]
    output_pose.orientation.y = pose_in_list[4]
    output_pose.orientation.z = pose_in_list[5]
    output_pose.orientation.w = pose_in_list[6]
    return output_pose

class NavigateWaypointActionServer(object):
    def __init__(self, name):
        # create messages that are used to publish feedback/result
        self._feedback = NavigateWaypointFeedback()
        self._result = NavigateWaypointResult()
        self._ns = rospy.get_namespace()
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, NavigateWaypointAction, execute_cb=self.execute_cb, auto_start = False)

        if self._ns.startswith("/jackal"):
            self._navigation_waypoints = "/Jackal_Navigation_Waypoints/"
            print("Action Server running for jackal")
        else:
            self._navigation_waypoints = "/Warthog_Navigation_Waypoints/"
            print("Action Server running for warthog")
        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        success = True

        param_name = self._navigation_waypoints+goal.destination
        pose_goal_list = rospy.get_param(param_name)
        print(pose_goal_list)
        print(param_name)
        PoseGoal = convert_pose_list_to_obj(pose_goal_list)
        
        clear_service_name = self._ns+"move_base/clear_costmaps"
        print(clear_service_name)
        print("waiting...")
        rospy.wait_for_service(clear_service_name)
        print("available")
        clearcmp = rospy.ServiceProxy(clear_service_name, Empty)
        print("response")
        response = clearcmp()
        print("cleared")

        rospy.loginfo('%s will navigate from %s to %s' % (self._ns, goal.origin, goal.destination))

        if goal.destination == "center":
            if goal.origin == "panel4":
                client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
                client.wait_for_server()
                #Go first to corner
                panel4_corner_list = rospy.get_param(self._navigation_waypoints+"panel4_corner")
                FirstPoseGoal = convert_pose_list_to_obj(panel4_corner_list)
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = FirstPoseGoal
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
                #Go first to bridge end in island
                bridge_end_island_pose_list = rospy.get_param(self._navigation_waypoints+"bridge_end_island_in")
                IntermediatePoseGoal = convert_pose_list_to_obj(bridge_end_island_pose_list)
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = IntermediatePoseGoal
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
                #Then go to center
                center_pose_list = rospy.get_param(self._navigation_waypoints+"center")
                FinalPoseGoal = convert_pose_list_to_obj(center_pose_list)
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = FinalPoseGoal
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
            elif goal.origin == "panel2":
                bridge_end_mainland_pose_list = rospy.get_param(self._navigation_waypoints+"bridge_end_mainland_in")
                IntermediatePoseGoal = convert_pose_list_to_obj(bridge_end_mainland_pose_list)
                client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
                client.wait_for_server()
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = IntermediatePoseGoal
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
                #Then go to center
                center_pose_list = rospy.get_param(self._navigation_waypoints+"center_out")
                FinalPoseGoal = convert_pose_list_to_obj(center_pose_list)
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = FinalPoseGoal
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
        elif goal.origin == "center":
            if goal.destination == "panel2":
                bridge_end_mainland_pose_list = rospy.get_param(self._navigation_waypoints+"bridge_end_mainland")
                IntermediatePoseGoal = convert_pose_list_to_obj(bridge_end_mainland_pose_list)
                client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
                client.wait_for_server()
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = IntermediatePoseGoal
                client.send_goal(mb_goal)
                print(mb_goal)
                wait = client.wait_for_result()
                #Then go to panel2
                panel2_pose_list = rospy.get_param(self._navigation_waypoints+"panel2")
                FinalPoseGoal = convert_pose_list_to_obj(panel2_pose_list)
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = FinalPoseGoal
                print(mb_goal.target_pose.pose)
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
            elif goal.destination == "panel4":

                client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
                client.wait_for_server()
                #First go to end of bridge
                bridge_end_island_pose_list = rospy.get_param(self._navigation_waypoints+"bridge_end_island")
                IntermediatePoseGoal = convert_pose_list_to_obj(bridge_end_island_pose_list)
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = IntermediatePoseGoal
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
                #Then go to corner
                panel4_corner_list = rospy.get_param(self._navigation_waypoints+"panel4_corner")
                FirstPoseGoal = convert_pose_list_to_obj(panel4_corner_list)
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = FirstPoseGoal
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
                #Then go to center
                panel4_pose_list = rospy.get_param(self._navigation_waypoints+"panel4")
                FinalPoseGoal = convert_pose_list_to_obj(panel4_pose_list)
                mb_goal = MoveBaseGoal()
                mb_goal.target_pose.header.frame_id = map_frame_id
                mb_goal.target_pose.header.stamp = rospy.Time.now()
                mb_goal.target_pose.pose = FinalPoseGoal
                client.send_goal(mb_goal)
                wait = client.wait_for_result()
        else:

            #print("Pose in odom frame")
            #print(pose_goal_odom_frame)
            # publish info to the console for the user
            #rospy.loginfo('%s: Was able to retrieve parameter - ' % (self._action_name, pose_goal) )

            #setup action client for move base
            client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
            client.wait_for_server()
            #create goal message
            mb_goal = MoveBaseGoal()
            #print frame_id
            mb_goal.target_pose.header.frame_id = map_frame_id
            mb_goal.target_pose.header.stamp = rospy.Time.now()
            mb_goal.target_pose.pose = PoseGoal
            # send goal to move_base
            #print(mb_goal)
            client.send_goal(mb_goal)
            wait = client.wait_for_result()

        if success:
            self._result.success = 1
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result)

if __name__ == '__main__':
    rospy.init_node('tb1_Navigate')
    server = NavigateWaypointActionServer(rospy.get_name())
    rospy.spin()
