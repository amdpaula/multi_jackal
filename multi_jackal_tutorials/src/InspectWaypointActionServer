#! /usr/bin/env python3
from random import randint

import rospy
import actionlib
import tf2_ros
import tf2_geometry_msgs

from geometry_msgs.msg import Pose
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

from multi_jackal_tutorials.msg import NavigateWaypointAction, NavigateWaypointGoal

from multi_jackal_tutorials.msg import InspectWaypointAction
from multi_jackal_tutorials.msg import InspectWaypointGoal
from multi_jackal_tutorials.msg import InspectWaypointFeedback
from multi_jackal_tutorials.msg import InspectWaypointResult

map_frame_id = "map"

def transform_pose(input_pose, from_frame, to_frame):
    tf_buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tf_buffer)

    pose_stamped = tf2_geometry_msgs.PoseStamped()
    pose_stamped.pose = input_pose
    pose_stamped.header.frame_id = from_frame
    pose_stamped.header.stamp = rospy.Time(0)

    try:
        output_pose_stamped = tf_buffer.transform(pose_stamped, to_frame, rospy.Duration(2))
        return output_pose_stamped.pose

    except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
        raise

def convert_pose_list_to_obj(pose_in_list):
    output_pose = Pose()
    output_pose.position.x = pose_in_list[0]
    output_pose.position.y = pose_in_list[1]
    output_pose.position.z = pose_in_list[2]
    output_pose.orientation.x = pose_in_list[3]
    output_pose.orientation.y = pose_in_list[4]
    output_pose.orientation.z = pose_in_list[5]
    output_pose.orientation.w = pose_in_list[6]
    return output_pose

class InspectWaypointActionServer(object):
    def __init__(self, name):
        # create messages that are used to publish feedback/result
        self._feedback = InspectWaypointFeedback()
        self._result = InspectWaypointResult()
        self._ns = rospy.get_namespace()
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, InspectWaypointAction, execute_cb=self.execute_cb, auto_start = False)

        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        success = True
        param_name = "/Inspection_Waypoints/"+goal.waypoint
        pose_list = rospy.get_param(param_name)
        frame_id = rospy.get_param(self._ns+"jackal_velocity_controller/odom_frame_id")

        rospy.loginfo('%s will inspect %s' % (self._ns, goal.waypoint))
        starting_time = rospy.get_time()

        list_of_poses = list(pose_list.keys())
        print(list_of_poses)
        n_inspections = 0
        n_poses = len(list_of_poses)

        while(rospy.get_time()-starting_time < 90):
            pose_number = n_inspections%n_poses
            pose_name = list_of_poses[pose_number]
            pose_goal = pose_list[pose_name]
            PoseGoal = convert_pose_list_to_obj(pose_goal)

            client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
            client.wait_for_server()
            mb_goal = MoveBaseGoal()

            mb_goal.target_pose.header.frame_id = map_frame_id
            mb_goal.target_pose.header.stamp = rospy.Time.now()
            mb_goal.target_pose.pose = PoseGoal

            client.send_goal(mb_goal)
            wait = client.wait_for_result()

            n_inspections+=1

        if success:
            self._result.success = 1
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result)

if __name__ == '__main__':
    rospy.init_node('tb1_Navigate')
    server = InspectWaypointActionServer(rospy.get_name())
    rospy.spin()
