#! /usr/bin/env python3
import rospy
import actionlib

from tf.transformations import quaternion_from_euler, euler_from_quaternion
from geometry_msgs.msg  import Pose, Twist
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

from std_srvs.srv import Empty
from std_msgs.msg import String

from multi_jackal_tutorials.msg import WarthogWaitAction
from multi_jackal_tutorials.msg import WarthogWaitGoal
from multi_jackal_tutorials.msg import WarthogWaitFeedback
from multi_jackal_tutorials.msg import WarthogWaitResult

class WarthogTestActionServer(object):
    def __init__(self, name):
        # create messages that are used to publish feedback/result
        self._feedback = WarthogWaitFeedback()
        self._result = WarthogWaitResult()
        self._ns = rospy.get_namespace()
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, WarthogWaitAction, execute_cb=self.execute_cb, auto_start = False)
        #self._as.register_preempt_callback(self.execute_preempt)
        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        final_as = "/warthog_wait"

        client = actionlib.SimpleActionClient(final_as, WarthogWaitAction)
        client.wait_for_server()

        print("Interface received wait goal")

        periods = goal.time
        final_goal = WarthogWaitGoal()
        final_goal.time = periods

        client.send_goal(final_goal)
        preempted = False
        done = False

        while (not done):
            preempted = self._as.is_preempt_requested()
            if preempted:
                client.cancel_goal()
                break
            done = client.wait_for_result(rospy.Duration(1))

        if not preempted:
            self._result.success = 1
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result)
        else:
            self._result.success = 0
            self._as.set_preempted()

        print("Interface finished")
            

    def execute_preempt(self):
        print("Previous goal preempted")
        self._as.set_preempted()
        self._as.accept_new_goal()

if __name__ == '__main__':
    rospy.init_node('warthog_test')
    server = WarthogTestActionServer(rospy.get_name())
    rospy.spin()
