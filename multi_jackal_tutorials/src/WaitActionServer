#! /usr/bin/env python3
import rospy
import actionlib

from tf.transformations import quaternion_from_euler, euler_from_quaternion
from geometry_msgs.msg  import Pose, Twist
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

from std_srvs.srv import Empty
from std_msgs.msg import String

from multi_jackal_tutorials.msg import WaitAction
from multi_jackal_tutorials.msg import WaitGoal
from multi_jackal_tutorials.msg import WaitFeedback
from multi_jackal_tutorials.msg import WaitResult

class WaitActionServer(object):
    def __init__(self, name):
        # create messages that are used to publish feedback/result
        self._feedback = WaitFeedback()
        self._result = WaitResult()
        self._ns = rospy.get_namespace()
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, WaitAction, execute_cb=self.execute_cb, auto_start = False)
        #self._as.register_preempt_callback(self.execute_preempt)
        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        success = True

        print("Robot received wait goal")

        periods = goal.time
        c_period = 0

        while c_period < periods:
            if self._as.is_preempt_requested():
                print("This goal was preempted")
                self._as.set_preempted()
                success = False
                break
            rospy.sleep(1)
            c_period = c_period + 1
            print(c_period)

        print("Robot finished waiting")
        print(c_period)

        if success:
            self._result.success = 1
            self._result.result = "success"
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result)

    def execute_preempt(self):
        print("Previous goal preempted")
        self._as.set_preempted()
        self._as.accept_new_goal()

if __name__ == '__main__':
    rospy.init_node('warthog_wait')
    server = WaitActionServer(rospy.get_name())
    rospy.spin()
